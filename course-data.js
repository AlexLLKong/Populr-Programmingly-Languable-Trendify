const courses = [
    {
     "School": "UBC",
     "CourseName": "Artificial Intelligence and Machine Learning",
     "Description": "In this intensive bootcamp, learn the popular computer programming language Python and related tools used for data science and machine learning. Study data models, neural networks and deep learning, and apply your skills in AI projects. Receive career support, and help with bidding on projects and applying for jobs.",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/study-topic\/artificial-intelligence-machine-learning"
    },
    {
     "School": "UBC",
     "CourseName": "Data Visualization",
     "Description": "Understand effective data visualizations and perform exploratory data analysis using Altair in Python. By the end of the course, you’ll be able to: use the Altair grammar of graphics to create data visualizations. select an appropriate visualization for the data. perform exploratory data analysis on a dataset. effectively communicate findings with figures. interpret data visualizations to answer questions and formulate follow-up questions.",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/courses\/data-visualization\/fs021"
    },
    {
     "School": "UBC",
     "CourseName": "Introduction to Machine Learning",
     "Description": "By the end of the course, you’ll be able to: describe supervised learning and identify what kind of tasks it is suitable for. explain common machine learning concepts such as classification and regression, training and testing, overfitting, parameters and hyperparameters, and the golden rule. choose a correct predictive modelling technique (e.g., regression or classification) given the available data. identify when and why to apply data pre-processing techniques such as scaling and one-hot encoding. describe at a high level how common machine learning algorithms work, including decision trees, and k-nearest neighbours. use Python and the scikit-learn package to develop an end-to-end supervised machine learning pipeline.",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/courses\/introduction-machine-learning\/fs031"
    },
    {
     "School": "UBC",
     "CourseName": "Programming in Python for Data Science",
     "Description": "Learn the foundations of programming in Python for data science, and how to conduct data analysis. Work with powerful Python packages made for data science, including Pandas for processing tabular data, Altair for data visualization and NumPy for working with numerical data types. Grow your capabilities in Python programming to process raw data into a format suitable for analysis, write your own analysis functions, and derive data-driven insights by creating interactive visualizations and summary tables. Come away from this online data science course knowing how to write human-readable code that sets a foundation of best practices and coding style. By the end of the course, you’ll know: the definition of tidy data and explain why it is an optimal format for data analysis. how to clean, filter, manipulate (wrangle) and summarize data using Python libraries for more effective data analysis. key data structures, iteration, flow control and program design relevant to data exploration and analysis. fundamental programming concepts such as loops, conditionals and data structures that create a solid foundation in data science programming",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/courses\/programming-python-data-science\/fs011"
    },
    {
     "School": "UBC",
     "CourseName": "The Data Science Toolbox",
     "Description": "Learn how to install, maintain and use the core tools in the data scientist’s toolbox. Get an overview of the data science tool ecosystem, as well as hands-on, practical experience working with tools like code sharing and versioning software (e.g., Git &amp; GitHub), reproducible electronic reports and presentation software (e.g., Jupyter notebook), as well as professional interactive development environments for writing code (e.g., Visual Studio Code). Learn how to: effectively use code sharing and versioning software to organize projects, manage file versions and collaborate with others. create, edit and run reproducible electronic reports and presentation software containing Python code using Jupyter Notebooks. define and correctly use a project working directory and distinguish between absolute file paths and relative file paths. write and execute code written in an interactive development environment. install essential software for data science. create shippable and shareable compute environments (e.g., Conda environments).",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/courses\/data-science-toolbox\/fs041"
    },
    {
     "School": "UBC",
     "CourseName": "Key Capabilities in Data Science",
     "Description": "Learn how to analyze and interpret data to inform strategies by looking beyond the numbers into the real story they tell. Gain skills to perform transparent and reproducible data analysis applicable to a wide range of professions and sectors, and discover how to leverage that information to make smart business decisions.",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/programs\/key-capabilities-data-science"
    },
    {
     "School": "UBC",
     "CourseName": "Extended Reality (XR)",
     "Description": "XR, also known as extended reality or cross reality, is an umbrella term for augmented reality (AR), virtual reality (VR) and mixed reality (MR). XR technology is used in applications that include education, gaming, retail, medicine, engineering and design. AR\/VR\/XR software engineers and developers are in high demand, and job growth is high.",
     "Language": ["C#"],
     "link": "https:\/\/extendedlearning.ubc.ca\/study-topic\/extended-reality-xr"
    },
    {
     "School": "UBC",
     "CourseName": "Intro to Systematic Program Design in Python Part 1",
     "Description": "This introductory programming course focuses on systematic programming methods foundational to writing well-designed programs. The course is taught using Python, a beginner-friendly, versatile programming language. Through readings, videos, short auto-graded questions and practice programming problems, learn processes for creating well-tested programs that are easy to update in the future. The course concludes with a small project that will allow you to practise and showcase your skills. You’ll learn how to: identify information in a problem domain and represent that information as data in your program. use examples and tests to decide and document what your program should do. write small, well-designed and well-tested programs.",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/courses\/intro-systematic-program-design-python-part-1\/ff011"
    },
    {
     "School": "UBC",
     "CourseName": "Intro to Systematic Program Design in Python Part 2",
     "Description": "This introductory programming course builds on core methods taught in&nbsp;Intro to Systematic Program Design in Python Part 1, and continues to focus on learning systematic programming methods for writing well-designed programs. The course concludes with a project on a topic of your interest that will allow you to read information from a file into your program, analyze the data to answer a question, and create a graph to visualize your results. You’ll learn how to: focus each part of your program on a single task. plan and build a larger program. create graphs programmatically.",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/courses\/intro-systematic-program-design-python-part-2\/ff021"
    },
    {
     "School": "UBC",
     "CourseName": "Introduction to Systematic Program Design in Python",
     "Description": "If you’re keen to not just learn how to code, but how to code well, then Introduction to Systematic Program Design in Python is for you. &nbsp;Introduction to Systematic Program Design in Python teaches you how to write well-organized, well-documented and well-tested programs by applying systematic program design skills. These are the core skills software engineers use when developing high-quality software. You will learn some Python, but the underlying skills will be useful for any programming language you use.",
     "Language": ["Python"],
     "link": "https:\/\/extendedlearning.ubc.ca\/programs\/introduction-systematic-program-design-python"
    },
    {
     "School": "SFU",
     "CourseName": "Introduction to Computing Science and Programming I (3)",
     "Description": "An elementary introduction to computing science and computer programming, suitable for students with little or no programming background. Students will learn fundamental concepts and terminology of computing science, acquire elementary skills for programming in a high-level language, e.g. Python. The students will be exposed to diverse fields within, and applications of computing science. Topics will include: pseudocode; data types and control structures; fundamental algorithms; recursion; reading and writing files; measuring performance of algorithms; debugging tools; basic terminal navigation using shell commands. Treatment is informal and programming is presented as a problem-solving tool. Prerequisite: BC Math 12 or equivalent is recommended. Students with credit for&nbsp;CMPT 102,&nbsp;128,&nbsp;130&nbsp;or&nbsp;166&nbsp;may not take this course for further credit. Students who have taken&nbsp;CMPT 125,&nbsp;129,&nbsp;130&nbsp;or&nbsp;135&nbsp;first may not then take this course for further credit. Quantitative\/Breadth-Science.",
     "Language": ["Python"],
     "link": "https:\/\/www.sfu.ca\/students\/calendar\/2022\/spring\/courses\/cmpt\/120.html"
    },
    {
     "School": "SFU",
     "CourseName": "Computing Laboratory&nbsp;CMPT 127 (3)",
     "Description": "Builds on&nbsp;CMPT 120&nbsp;to give a hands-on introduction to programming in C and C++, the basics of program design, essential algorithms and data structures. Guided labs teach the standard tools and students exploit these ideas to create software that works. To be taken in parallel with&nbsp;CMPT 125. Prerequisite:&nbsp;CMPT 120&nbsp;or&nbsp;CMPT 128&nbsp;or&nbsp;CMPT 130, with a minimum grade of C-. Corequisite:&nbsp;CMPT 125.",
     "Language": ["C","C++"],
     "link": "https:\/\/www.sfu.ca\/students\/calendar\/2022\/spring\/courses\/cmpt\/127.html"
    },
    {
     "School": "SFU",
     "CourseName": "Introduction to Computer Programming I (3)",
     "Description": "An introduction to computing science and computer programming, using a systems oriented language, such as C or C++. This course introduces basic computing science concepts. Topics will include: elementary data types, control structures, functions, arrays and strings, fundamental algorithms, computer organization and memory management. Prerequisite: BC Math 12 (or equivalent, or any of&nbsp;MATH 100,&nbsp;150,&nbsp;151,&nbsp;154, or&nbsp;157, with a minimum grade of C-). Students with credit for&nbsp;CMPT 102,&nbsp;120,&nbsp;128&nbsp;or&nbsp;166&nbsp;may not take this course for further credit. Students who have taken&nbsp;CMPT 125,&nbsp;129&nbsp;or&nbsp;135&nbsp;first may not then take this course for further credit. Quantitative\/Breadth-Science.",
     "Language": ["C","C++"],
     "link": "https:\/\/www.sfu.ca\/students\/calendar\/2022\/spring\/courses\/cmpt\/130.html"
    },
    {
     "School": "SFU",
     "CourseName": "&nbsp;Introduction to Computer Programming II (3)",
     "Description": "A second course in systems-oriented programming and computing science that builds upon the foundation set in&nbsp;CMPT 130&nbsp;using a systems-oriented language such as C or C++. Topics: a review of the basic elements of programming; introduction to object-oriented programming (OOP); techniques for designing and testing programs; use and implementation of elementary data structures and algorithms; introduction to embedded systems programming. Prerequisite:&nbsp;CMPT 130&nbsp;with a minimum grade of C-. Students with credit for&nbsp;CMPT 125, 126, or&nbsp;129&nbsp;may not take this course for further credit. Quantitative.",
     "Language": ["C","C++"],
     "link": "https:\/\/www.sfu.ca\/students\/calendar\/2022\/spring\/courses\/cmpt\/135.html"
    },
    {
     "School": "SFU",
     "CourseName": "Object Oriented Design in Java (3)",
     "Description": "An introduction to object oriented design using Java. The Java programming language is introduced, with an emphasis on its advanced features. The course covers the building blocks of object oriented design including inheritance, polymorphism, interfaces and abstract classes. A number of object oriented design patterns are presented, such as observer, iterator, and singleton. The course also teaches best-practices in code construction. It includes a basic introduction to programming event driven graphical user interfaces. Prerequisite:&nbsp;CMPT 225&nbsp;with a minimum grade of C-. Students with credit for CMPT 212 cannot take this course for further credit.",
     "Language": ["Java"],
     "link": "https:\/\/www.sfu.ca\/students\/calendar\/2022\/spring\/courses\/cmpt\/213.html"
    },
    {
     "School": "BCIT",
     "CourseName": "Object Oriented Programming",
     "Description": "This course uses Python to introduce object-oriented programming principles and techniques to students who have completed&nbsp;ACIT 1515&nbsp;or equivalent. Topics include: object-oriented programming concepts (classes, objects, methods, inheritance, encapsulation, and polymorphism), techniques for software design and reuse, use of typical Python libraries and modules, unit testing and debugging of Python programs, creation of HTTP APIs, creation of graphical user interfaces.",
     "Language": ["Python"],
     "link": "https:\/\/www.bcit.ca\/courses\/object-oriented-programming-acit-2515\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Network Programming with Python",
     "Description": "This course is an introduction to computer programming terminology and concepts. Students will learn to write basic programs using variables, scope, control flow, functions, object-oriented language features, unit testing, error handling, HTTP serving, and how to use Python to automate network devices. Practical exercises provide students the exposure to computer programming and the ability to interpret programming code.",
     "Language": ["Python"],
     "link": "https:\/\/www.bcit.ca\/courses\/network-programming-with-python-citx-1142\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Programming Fundamentals Part 1 (Python)",
     "Description": "Students with no prior computer programming experience are introduced to using Python to write simple programs. This hands-on introductory computer programming course is the foundation for all BCIT Computing PTS programming courses.&nbsp;COMP 1516&nbsp;is not a Python development course, it is the first step in a series of three (3) applied programming fundamentals courses. Students must provide their own current model Windows capable PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework. Topics include: Data structures, data modelling, programming constructs, lists, strings, sets and maps. Labs and exercises focus on writing code for projects, assignments, and activities. Participants will design, implement, test, and debug simple programs that incorporate: variables, expressions, assignments, I\/O, conditional and iterative control constructs, functions, and parameter passing. Please Note: Attendance, participation in class and the BCIT Learning Hub are mandatory. Students may have an average total time commitment of 15 hours per week; 3 hours of class time, a 1-hour online component and 10+ hours of homework each week.&nbsp;COMP 1516&nbsp;is required for the Applied Software Development, ASD and the Applied Computer Information, ACIS Associate Certificates, as well as the Computer Systems Certificate, CSC. Upon completion, successful students will have a basic understanding of computer programming and be prepared to move on to&nbsp;COMP 2501&nbsp;–Programming Fundamentals Part 2.",
     "Language": ["Python"],
     "link": "https:\/\/www.bcit.ca\/courses\/programming-fundamentals-part-1-python-comp-1516\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Relational Database Design and SQL",
     "Description": "This intensive, hands-on course is the prerequisite for all advanced database courses in BCIT Computing programs.&nbsp;COMP 1630&nbsp;is equivalent to the Full-time CST and CIT Diploma database courses and provides an introduction to relational database design concepts and industry standards. Students learn the tools and processes for data modeling in Relational Database Management Systems (RDBMS) in a Windows PC lab environment. They also focus on the Structured Query Language, SQL to define and manipulate data. Topics include functional dependencies, normalization, database design methodologies, entity relationship modeling and the use of UML as a diagramming notation. Advanced topics include: an introduction to SQL, DDL- data definition language and DML- data manipulation language, views, security, transaction management, triggers and stored procedures. Current trends in database such as replication, object-relational DBMS, data warehousing, OLAP- online analytical processing and database uses web technology are discussed. Students in&nbsp;COMP 1630&nbsp;are required to attend one face to face meeting each week, participate in group work, and an online component, plus complete reading and assignments outside of class. Upon successful completion, participants will be able to design and implement a database application and be prepared to move on to higher level database courses including: Data Warehouse, Data Quality, MySQL, MS Business Intelligence, MS SQL Server and Oracle.",
     "Language": ["SQL"],
     "link": "https:\/\/www.bcit.ca\/courses\/relational-database-design-and-sql-comp-1630\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Introduction to Web Development",
     "Description": "​This hands-on course provides an introduction to basic web technologies, including scripting with HTML5 and CSS3.&nbsp;COMP 1850&nbsp;is the foundation for several advanced web courses in BCIT Computing. Students are shown how to hand code web pages according to W3C standards using HTML plus style text and content with CSS. In addition to learning the foundational web scripting languages, students receive an introduction to web interface design concepts. Information architecture, and basic interactivity using web forms will also be discussed. There is a brief introduction to JavaScript and the concept of the DOM (Document Object Model). Labs and exercises focus on how to build fluid layouts using CSS flexbox and grid. Students will also create mobile phone and tablet friendly websites using modern mobile-first responsive web development techniques.&nbsp;COMP 1850&nbsp;is a required course for Web Development Fundamentals and several Associate Certificates including: Applied Web Development, AWD; Applied Computer Information Systems, ACIS; Applied Computer Applications, ACA; Technical Writing, some Business programs, as well as the Computer Systems Certificate, CSC. By the end of this course successful students will be able to design, develop, and deploy effective modern and responsive web sites. After completing&nbsp;COMP 1850&nbsp;students are prepared to move on to the next level&nbsp;COMP 2132&nbsp;-Web Development with JavaScript..",
     "Language": ["HTML", "CSS", "JavaScript"],
     "link": "https:\/\/www.bcit.ca\/courses\/introduction-to-web-development-comp-1850\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Android and Mobile Application Development Tools",
     "Description": "​COMP 2052&nbsp;provides an introduction to mobile application development using tools and scripting languages rather than object-oriented programing languages. This hands-on course follows on from&nbsp;COMP 1850&nbsp;and (COMP 2015&nbsp;or&nbsp;COMP 2132) and assumes students already understand how to develop and deploy web sites with HMTL5, CSS3 and JavaScript. Participants do not need to be object-oriented programmers however they should have significant experience using mobile apps. Students will design and develop web-based, native and hybrid mobile applications using jQuery Mobile, Android Studio, Apache Cordova, and other tools. Labs and exercises focus on how to implement entry level, mobile applications for Android and other mobile web platforms. Topics include a comparison of native, hybrid and web based mobile technologies. Starting with the fundamentals of web-based mobile applications, Android Studio and Apache Cordova are used to implement web-based, native, and cross-platform mobile solutions.&nbsp;COMP 2052&nbsp;is an elective in the CST\/PTS Diploma, the Web and Mobile Development (AMD) and Applied Web Development (AWD) associate certificates from BCIT Computing. Upon successful completion, students will be able to choose from a variety of tool sets for platform independent mobile and web application development. This course will only be offered once per year in the April term.",
     "Language": ["Kotlin"],
     "link": "https:\/\/www.bcit.ca\/courses\/android-and-mobile-application-development-tools-comp-2052\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Web Development with JavaScript",
     "Description": "This hands-on course follows on from&nbsp;COMP 1850&nbsp;-Introduction to Web Development. Those who already understand HTML5 and CSS3 will explore web development in more depth with JavaScript and jQuery and be introduced to programming for web sites and web applications. Students must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework.&nbsp;COMP 2132&nbsp;introduces web programming concepts, participants will create and use JavaScript variables, objects, functions, and arrays. Labs, exercises and assignments focus on the theory behind client-side web scripting and how to manage interactive sites. Topics include: object\/feature detection, DOM manipulation, event handling, functions (named and anonymous), closures, object detection, object creation and prototyping, event handling and callback functions, jQuery introduction, jQuery plugin usage, form validation, timers and simple animations. Attendance, participation in class and the BCIT Learning Hub are mandatory. In the 12-week sections, students may have an average total time commitment of 7+ hours each week. Please Note: The 6-week compressed sections may have twice the workload per week. This course is prerequisite for several follow-on advanced JavaScript courses:&nbsp;COMP 2052&nbsp;Android and Mobile Application Development Tools,&nbsp;COMP 2909&nbsp;Angular and Vue.js,&nbsp;COMP 3012&nbsp;Back-End Web Development with Node.js,&nbsp;COMP 2913&nbsp;React and Modern JavaScript and&nbsp;COMP 3015&nbsp;Introduction to Web Applications with PHP.&nbsp;COMP 2132&nbsp;is a required course for BCIT Computing Advanced Web Technologies; both associate certificates in Applied Web Development, AWD and Web and Mobile Application Development, WMA, as well as Web Development Fundamentals and the Computer Systems Certificate, CSC. Upon completion, successful students will be able to program Front-End and Back-End web sites, and develop significant web applications with JavaScript.",
     "Language": ["HTML", "CSS", "JavaScript"],
     "link": "https:\/\/www.bcit.ca\/courses\/web-development-with-javascript-comp-2132\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Python Fundamentals for Data Analysis",
     "Description": "This hands-on course follows on from&nbsp;COMP 1630&nbsp;and was designed to introduce Python as a tool for data analytics. Students must have prior database systems and Structured Query Language (SQL) programming, plus have basic Excel spreadsheets skills before registering for this course. Participants must provide their own current model PC with a minimum of an i5 or equivalent processor, 8 GB of RAM and 256 GB storage capable of running Windows 10 or above. High-speed internet access is needed for online sections and homework. BCIT does not provide technical support for student's hardware or operating systems. Starting with an overview of the Python IDE, participants will explore foundational Python programming concepts. Participants are introduced to Variables, Conditions, Operators, Loops, Functions, Arrays, Dictionaries and DataFrames. Exercises and labs explore data analysis using simple statistics with Python. Students are also introduced to string manipulation, Regression, Aggregation, and object-oriented structures with Python used in data analysis. Students are shown how to use Python for basic graphing.&nbsp;COMP 2454&nbsp;is a required course in the Applied Data Analytics Certificate, ADAC from BCIT Computing. Upon completion successful students will use Python to perform exploratory data analysis and as preparation for data modeling.",
     "Language": ["Python"],
     "link": "https:\/\/www.bcit.ca\/courses\/python-fundamentals-for-data-analysis-comp-2454\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Programming Fundamentals Part 2 (Java)",
     "Description": "Students who already understand how to write simple programs in Python will focus on best practices in computer programming and explore problem-solving skills. This second-level computer programming course follows on from&nbsp;COMP 1516&nbsp;- Programming Fundamentals Part 1 (Python).&nbsp;COMP 2501&nbsp;introduces application programming interfaces (APIs) and how to transition from Python to Java. This is not a Java development course, it is the second step in a series of three (3) applied programming fundamentals courses where Java is introduced. Students must provide their own current model Windows capable PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework. Topics include: an overview of object-oriented programming constructs including basic introductions to: encapsulation, inheritance, polymorphism, and exceptions. Labs and exercises demonstrate problem solving; writing automated tests, and practicing design before implementation. Please Note: Attendance, participation in class and the BCIT Learning Hub are mandatory. Students may have an average total time commitment of 13+ hours per week; 3 hours of synchronous class time, and 10+ hours of homework each week.&nbsp;COMP 2501&nbsp;is required for the Applied Software Development, ASD and the Computer Systems Certificate, CSC. Upon completion, successful students will be able to write robust computer programs. They will be prepared to move on to&nbsp;COMP 2511- Procedural Programming with C and\/or&nbsp;COMP 2601- Programming Fundamentals Part 3 (Objects).",
     "Language": ["Java"],
     "link": "https:\/\/www.bcit.ca\/courses\/programming-fundamentals-part-2-java-comp-2501\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Procedural Programming with C",
     "Description": "This intermediate-level course follows on from&nbsp;COMP 1451&nbsp;or&nbsp;COMP 2501&nbsp;and assumes significant prior knowledge of computer programming fundamentals. Topics include language syntax, common coding styles and idioms and the implementation of selected data structures and algorithms in C. Lectures and code examples are reinforced with hands-on labs, and assignments. Students must provide their own current model Windows capable PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework.&nbsp;COMP 2511&nbsp;has two classes per week over ten weeks and uses the BCIT Learning Hub for quizzes, discussion boards, labs and assignments. Please Note: Attendance and participation in class are mandatory. Students may have an average total time commitment of 15+ hours per week; 6 hours of synchronous class time, plus 9-12 hours of homework each week. C Programming students will have improved application development abilities in other programming languages, as the C syntax is the basis for Java, C# and C++. This course is equivalent to&nbsp;COMP 2510&nbsp;in the CST Full-time Diploma which has transfer credit to several universities.&nbsp;COMP 2511&nbsp;is an elective in the Applied Software Development, ASD Associate Certificate. It is required in the Computer Systems Certificate, CSC and for the follow-on courses in C++ starting January 2022. Upon completion, successful students will be able to build and deploy modular multi-file C programs to industry standards.",
     "Language": ["C","C++"],
     "link": "https:\/\/www.bcit.ca\/courses\/procedural-programming-with-c-comp-2511\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Programming Fundamentals Part 3 (Object Design)",
     "Description": "This hands-on, third-level computer programming fundamentals course follows on from&nbsp;COMP 2501– Programming Fundamentals Part 2 (Java). Students who already understand how to write computer programs in Python and Java will focus on object-oriented programming (OOP) best practices and design in preparation for higher-level software development courses.&nbsp;COMP 2601&nbsp;introduces debugging intermediate-level programs with an OOP language specifically Java. It is the third step in in a series of three (3) applied programming fundamentals courses. Students must provide their own current model Windows capable PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework. Topics include: language syntax, data abstraction, with a deeper focus on encapsulation, inheritance, polymorphism, and exception handling. Design Patterns and collections will be applied to appropriate problems. Labs and exercises demonstrate concepts of design, development, and testing. Please Note: Attendance, participation in class and the BCIT Learning Hub are mandatory. Students may have an average total time commitment of 13+ hours per week; 3 hours of class time, and 10+ hours of homework each week.&nbsp;COMP 2601&nbsp;is required for the Applied Software Development, ASD and the Computer Systems Certificate, CSC. Upon completion, successful students will be able to plan, write, and test significant OOP programs in Java. They will be able to apply design patterns and prepared move on to higher level application development courses in specific languages: Java, C# and C++.",
     "Language": ["Java"],
     "link": "https:\/\/www.bcit.ca\/courses\/programming-fundamentals-part-3-object-design-comp-2601\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Computer Architecture and Organization",
     "Description": "​Computer architecture and computer organization are fundamental topics for computer programmers and computer systems developers. This hands-on course follows on from Applied Mathematics for Computing and Java programming.&nbsp;COMP 2825&nbsp;is a study of the rules and methods used to describe the functionality and implementation of computer systems. The hierarchy of computer levels and functions are discussed and analyzed in detail. Through exercises and labs students evaluate modern computer system hardware architectures. They are shown how to build performance into their software applications and computer systems. Topics include pipelining, error-correcting code in theory and in practice, performance enhancement, hard-disk drives and solid-state drives, cache and main memory, addressing, microprogramming the CPU, registers and circuits. Additional topics include the ALU and data path, logarithms, bus clocking, bus arbitration, and address decoding.&nbsp;COMP 2825&nbsp;is required for the Computer Systems Certificate, CSC in PTS and it is equivalent to&nbsp;COMP 2721&nbsp;in the full-time CST Diploma. Upon successful completion students will use software at the hardware level to optimize how code is managed by the datapath inside the CPU. They will have skills to evaluate and recommend the appropriate computer system architecture for specific applications. be able to optimize software for specific hardware, accounting for how code is managed inside the CPU. They will also have gained an introduction to lower-level assembly programming, in order to build better software applications in higher-level programming languages.",
     "Language": ["Assembly"],
     "link": "https:\/\/www.bcit.ca\/courses\/computer-architecture-and-organization-comp-2825\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Front-End Web Development with Angular and Vue.js",
     "Description": "​This hands-on web development course follows on from&nbsp;COMP 2132. It was designed for students with prior experience developing web pages using HTML5, CSS3 and JavaScript. Angular and Vue are popular JavaScript open-source front-end application frameworks for developing modularized single-page applications and building user interfaces.&nbsp;COMP 2909&nbsp;starts with Angular development fundamentals, students are shown how to build components, modules, and services for data-driven, client-side web applications. Vue.js is then used for rapid modular web application development. Exercises also include: routing, asynchronous JSON transfer, and validation. These features are then implemented using Vue.js. Automated testing and redux architecture are also introduced using Angular. There is a brief introduction to using Angular with the Apache Cordova framework for platform independent mobile development for Android and iOS. Participants may also want to complete&nbsp;COMP 3012&nbsp;-Back-End Web Development with Node.js,&nbsp;COMP 3013&nbsp;-Front-End Web Development with React.js, and&nbsp;COMP 3015&nbsp;-Web Application Development with PHP. Students must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. Highspeed internet access is needed for online sections and for homework.&nbsp;COMP 2909&nbsp;is an elective in several BCIT Computing applied associate certificate as well as the CST FLEX Diploma. Upon completion, successful students will be able to use Angular and Vue frameworks to develop data-driven and interactive single-page web applications for all mainstream browsers. This course is offered in the fall (October) and winter (February).​",
     "Language": ["HTML", "CSS", "JavaScript"],
     "link": "https:\/\/www.bcit.ca\/courses\/front-end-web-development-with-angular-and-vue-js-comp-2909\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Back-End Web Development with Node.js",
     "Description": "​This hands-on course follows on from&nbsp;COMP 2132&nbsp;and replaces&nbsp;COMP 2912. It was designed for students with prior experience developing web pages using HTML5, CSS3 and JavaScript. Students must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. Highspeed internet access is needed for online sections and for homework. Starting with how Node.js fits into client-server software architecture, participants will focus on the Node.js programming model. Labs and exercises cover creating, installing and using node modules. Web frameworks like Express.js and Jest as used to build and test powerful web applications. Students will experience how Node.js is used by enterprise environments and modern web stacks like MEAN and MERN. Topics include: how to build, and deploy a RESTful API following best-practices, and learn error handling strategies. Typescript integration with Node.js as well as how to connect to databases will also be discussed. Please Note: Attendance, participation in class and the BCIT Learning Hub are required. Students may have an average total time commitment of 11 hours each week; with 3 hours of class time, and 8 hours of homework. Web developers should also consider multiple advanced JavaScript tools including:&nbsp;COMP 2909&nbsp;Angular and Vue.js Fundamentals and&nbsp;COMP 3013​ Front-End Web Development with React.js.&nbsp;COMP 3012&nbsp;is an elective in several BCIT Computing applied associate certificates; Web Development (AWD), Web and Mobile Application Development (WMA), Advanced Java Development (AJD) and Advanced .NET Development; as well as the CST FLEX Diploma. Upon completion, successful students will be able to use Node.js to build robust, scalable, data intensive web applications with user",
     "Language": ["HTML", "CSS", "JavaScript"],
     "link": "https:\/\/www.bcit.ca\/courses\/back-end-web-development-with-node-js-comp-3012\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Front-End Web Development with React.js",
     "Description": "React.js is an open source JavaScript library widely used to create fast, modular web and mobile applications. This hands-on course follows on from&nbsp;COMP 2132&nbsp;and was designed for students with prior experience developing web pages using HTML5, CSS3 and JavaScript. Students must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. Highspeed internet access is needed for online sections and for homework. Starting with an introduction to React.js concepts, participants concentrate on how React works with browsers and the Document Object Model (DOM). Then students use the modern Hooks API to built clean and testable components. Instructor led labs and exercises focus on how to structure and develop single-page applications using NPM, Webpack and Babel, following current industry standards. Topics include: Routing, Server-Side Rendering, Styling, State Management, and deployment. Please Note: Attendance, participation in class and the BCIT Learning Hub are required. Students may have an average total time commitment of 11 hours each week; with 3 hours of class time, and 8 hours of homework. ​Web developers should also consider learning multiple advanced JavaScript tools including:&nbsp;COMP 2909&nbsp;-Angular and Vue.js Fundamentals and&nbsp;COMP 3012&nbsp;Back-End Web Development with Node.js.&nbsp;COMP 3013&nbsp;is an elective in several BCIT Computing applied associate certificates; Web Development (AWD), Web and Mobile Application Development (WMA), Advanced Java Development (AJD) and Advanced .NET Development; as well as the CST\/PTS Diploma. Upon completion successful participants will be able to use React to create and deploy dynamic web applications quickly, with more functionality and less code. This course replaces&nbsp;COMP 2913&nbsp;as of January 2023.",
     "Language": ["HTML", "CSS", "JavaScript"],
     "link": "https:\/\/www.bcit.ca\/courses\/front-end-web-development-with-react-js-comp-3013\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Web Application Development with PHP",
     "Description": "This hands-on advanced course follows&nbsp;COMP 2132&nbsp;–Web Development with JavaScript and is aimed at students who already possess a solid understanding of web development and who have client-side programming experience.&nbsp;COMP 3015&nbsp;begins with basic client-server concepts. Participants are then introduced to server-side programming with PHP and a variety of open-source software tools. Topics include: data encoding, regular expressions, input sanitization, dependency management with Composer, and common components to a typical web application. MySQL, password hashing, and TLS are also discussed. Labs and assignments include using: file I\/O, password hashing functions, plus uploading images and other files to a server. Participants gain hands-on experience developing and deploying server-side software in an Object- Oriented Programming (OOP) approach Students practice obtaining and processing user input, basic web application security and how to mitigate the dangers of cross site scripting, session hijacking, and SQL injection.&nbsp;COMP 3015&nbsp;is a required course in the Web and Mobile Application Development (WMA) Associate Certificate, and the CST FLEX Diploma, which have significant coding prerequisites. Note: Applied Web Development (AWD) students without Java or C# programming language experience are advised to complete&nbsp;COMP 3012&nbsp;-Back-End Web Development with Node.js, prior to this course. Upon completion, successful students will be able to develop commercial quality web applications and move on to&nbsp;COMP 4669&nbsp;-Advanced Web Applications with PHP.",
     "Language": ["PHP"],
     "link": "https:\/\/www.bcit.ca\/courses\/web-application-development-with-php-comp-3015\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Application Development with Java",
     "Description": "​This forth-level programming course follows on from&nbsp;COMP 2601&nbsp;and assumes students have significant prior knowledge of object-oriented programming using Java.&nbsp;COMP 3601&nbsp;starts with using Java core APIs and the Eclipse IDE with industry standard coding styles and naming conventions. Students practice how to build and deploy commercial quality Java applications with Event Driven Architecture. Labs and exercises use a variety of skills to debug programs and use design patterns to develop advanced applications in Java. Topics include: packages, inner classes, file I\/O, an overview of database connectivity, user interfaces, model-view-controller (MVC) and other design patterns for standalone Java applications as well as Java web applications. Participants develop database enabled web applications and are introduced to Java web tier development. There is a focus on the design and how to build, deploy and distribute Java web applications into application servers. They configure and customize a simple web application server with Java Database Connectivity (JDBC) to create and edit data from Java Web Applications. Maven is used with Java Servlets as web application controllers and Java Server Pages (JSP) to build and deploy Java web apps on JEE containers, implemented by a WildFly application server.&nbsp;COMP 3601&nbsp;is part of three BCIT Computing Associate Certificates; Applied Software Development (ASD), Advanced Java Application Development (AJD), a prerequisite for Web and Mobile Applications (WMA) and a recommended elective in the CST FLEX Diploma. Upon completion, successful students will be able to build and deploy well designed basic Java Web applications and be prepared to move on to&nbsp;COMP 4601- Advanced Java Web App Development.&nbsp;",
     "Language": ["Java"],
     "link": "https:\/\/www.bcit.ca\/courses\/application-development-with-java-comp-3601\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Application Development with C#",
     "Description": "This fourth-level computer programming course follows on from&nbsp;COMP 2601&nbsp;and assumes prior knowledge of object-oriented programming using Java. Students must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework.&nbsp;COMP 3602&nbsp;starts with an introduction to C# programming with Microsoft Visual Studio and the .NET Framework 4.8 for Windows application development. Labs and assignments are designed to reinforce Microsoft industry standards and best practices. Topics include: Windows Forms and controls, event-driven programming, deploying a web service, asynchronous programming, working with SQL databases and effective application debugging. Students build graphical user interfaces (GUIs) and design Windows application software. Please Note: Attendance, participation in class and the BCIT Learning Hub are required. Students may have an average total time commitment of 12+ total hours each week; 3 hours of class time, a 1-hour online component and 8+ hours of homework.&nbsp;COMP 3602&nbsp;is the prerequisite for&nbsp;COMP 4602​ .NET Web and Mobile Apps, both courses are required in the Advanced .NET Development (AND) Associate Certificate and are electives the CST\/FLEX Diploma. Upon completion, successful students will be able to use C# to build and deploy cross platform software applications with the latest .NET technologies.",
     "Language": ["C#"],
     "link": "https:\/\/www.bcit.ca\/courses\/application-development-with-c-comp-3602\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Application Development with C++",
     "Description": "This hands-on computer programming software application development course follows on from&nbsp;COMP 2511&nbsp;and&nbsp;COMP 2601. It assumes students have prior knowledge of both procedural programming with C and understand object-oriented programming fundamentals using Java or C#.&nbsp;COMP 3603&nbsp;starts with a quick review of the language syntax that is common to C, Java, C# and C++. Students are then introduced to C++ classes, and how inheritance, polymorphism, abstraction and modularization all relate to the C++ language. Participants must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework. Labs and exercises focus on the coding style and naming conventions used to build and deploy commercial quality C++ applications. Topics include: C++ Stream Input\/Output, operator overloading, templates functions and classes, exception handling, and introduction to the Standard Template Library. Multiple inheritance to model complex algorithms is also discussed. Please Note: Attendance, participation in class and the BCIT Learning Hub are required. Students may have an average total time commitment of 16 total hours each week; 3 hours of class time, a 1-hour online component and 12+ hours of homework each week.&nbsp;COMP 3603&nbsp;is the prerequisite for&nbsp;COMP 4603&nbsp;– Advanced C++Application Development, starting September 2022. Both courses are electives in the Applied Software Development (ASD) Associate Certificate and both are required in the CST\/PTS Diploma. Upon completion, successful students will be able to build and deploy well designed, entry-level C++ applications and be prepared to move on to&nbsp;COMP 4603- Advanced C++ Application Development.",
     "Language": ["C++"],
     "link": "https:\/\/www.bcit.ca\/courses\/application-development-with-c-comp-3603\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Algorithm Analysis and Design",
     "Description": "In this hands-on course, Java programming students who have also taken Discrete Math will develop their ability to analyze and design computer algorithms. In particular, learners will analyze the time and space complexity of programs, solve nontrivial programming problems using algorithmic techniques, and prove that their solution is correct. The emphasis will be on developing the practical skills of analysis and design. Topics include: evaluating time and space complexity and designing solutions by using appropriate data structures or applying techniques such as recursion, parsing and graph algorithms.",
     "Language": ["Java"],
     "link": "https:\/\/www.bcit.ca\/courses\/algorithm-analysis-and-design-comp-3761\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Advanced Topics in Data Analytics",
     "Description": "This is the final course and project for the Applied Data Analytics Certificate (ADAC) from BCIT Computing. Students must have completed all specific prerequisites in order to register.&nbsp;COMP 4254&nbsp;is built on top of: Python Fundamentals for Data Analysis, Data Analytics Fundamentals, and Advanced Statistical Techniques for Data Analytics. Students must have experience using data visualization tools, be able to use R and apply statistical methods with algorithms in order to develop their final project.&nbsp;COMP 4254&nbsp;is a BYOD (bring your own device) course, participants must provide their own current model PC with an i5 or higher equivalent processor, 8 GB of RAM minimum, 256 GB minimum storage and high-speed internet access. Participation is mandatory and students can expect a minimum of 3 hours per week online in real time via the BCIT Learning Hub plus using two-way audio and video. Attendance is required during scheduled class hours and students should expect an additional 10+ hours for reading and homework each week. Building on statistics for data mining, students will make use of previous tools and technologies used through out the program. A combination of R, or Python, and Data Analysis tools and visualization techniques will be integrated into an advanced data analytics project. There is an introduction to data analytics techniques with Big Data. Labs and exercises use Python and Apache Spark for data mining with a focus on Business Intelligence and Big Data. Participants will work with a variety of structured and unstructured data sources to model, analyze and visualize data. Upon successful completion of&nbsp;COMP 4254&nbsp;students will be able to develop an advanced project from start-to-finish which includes data preparation, Business Intelligence and an in-depth analysis on a broad range of data sources. This course will be offered in the Winter (January) and Spring (April) terms.",
     "Language": ["Python"],
     "link": "https:\/\/www.bcit.ca\/courses\/advanced-topics-in-data-analytics-comp-4254\/"
    },
    {
     "School": "BCIT",
     "CourseName": ".NET Web and Mobile Apps",
     "Description": "This hands-on course follows on from&nbsp;COMP 3602&nbsp;and is aimed at students who can already use C# in the .NET Framework to create significant software applications. Participants must also understand how to build Web Applications using HTML5\/CSS3 and JavaScript.&nbsp;COMP 4602&nbsp;is a “Bring Your Own Devices\" (BYOD) course. Students must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 500 GB minimum storage. This course will focus on Android as it runs on both Windows and iOS. Those who want to develop iOS Mobile Apps will need a Mac and iOS mobile device. Participants will also need their own mobile device to test their Apps. High-speed internet access is needed for online sections and for homework.&nbsp;COMP 4602&nbsp;students are introduced to ASP.NET Razor, used for building and deploying Server-side and Client-side Web Apps to MS Azure. This course is blended delivery with 3 hour lessons on-campus lessons and 1 hour online activities via BCIT Learning Hub, each week. Labs and exercises focus on building Azure static web and Mobile Apps using .NET XAML and Blazor with MAUI to industry standards. Topics also include the installing .NET MAUI and leveraging the MAUI architecture, MVVM and Data Binding, navigation, accessing platform functionality, displaying data and App themes.&nbsp;COMP 4602&nbsp;is a required course in the “Advanced .NET Development\", and “Web and Mobile Application Development\" Associate Certificates and is an elective in the CST FLEX Diploma. Upon successful completion, students will be able to use .NET XAML and Blazor with MAUI to build a variety of .NET software applications, including Desktop Apps, Full Stack Web Apps, and iOS or Android Mobile Apps. This course is offered once per year in the September (Fall) or January (Winter) term.",
     "Language": ["C#"],
     "link": "https:\/\/www.bcit.ca\/courses\/net-web-and-mobile-apps-comp-4602\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Advanced C++ Application Development",
     "Description": "​​This hands-on advanced software application development course follows on from&nbsp;COMP 2511&nbsp;and&nbsp;COMP 3603. It assumes students have solid knowledge of procedural programming with C, understand object-oriented programming and are able to write intermediate-level programs in C++.&nbsp;COMP 4603&nbsp;starts with a quick review of writing and testing a well formed C++ program. Students are then introduced to best practices, common design patterns and features added to the C++ language up to C++ 20 to develop significant software applications to industry standards. Participants must provide their own current model PC, i5 or higher equivalent processor, 8 GB of RAM minimum, and 256 GB minimum storage. High-speed internet access is needed for online sections and for homework. Labs and exercises focus on building and deploying advanced C++ software applications for business and commercial use. Please Note: Attendance, participation in class and the BCIT Learning Hub are required. Students may have an average total time commitment of 16 total hours each week; 3 hours of synchronous class time, 1+ hour asynchronous activity in the BCIT Learning Hub. Participants should plan for 12+ hours of homework, reading and research each week.&nbsp;COMP 3603&nbsp;and&nbsp;COMP 4603&nbsp;are electives in the Applied Software Development (ASD) Associate Certificate and both are required in the CST\/PTS Diploma.&nbsp;COMP 4603&nbsp;– Advanced C++Application Development replaces&nbsp;COMP 2618&nbsp;and will be offered starting September 2022. Upon completion, successful students will be able to build and deploy advanced C++ software applications to industry standards.​ ​COMP 4603&nbsp;will be offered in the fall (September) and winter (January) terms.",
     "Language": ["C++"],
     "link": "https:\/\/www.bcit.ca\/courses\/advanced-c-application-development-comp-4603\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Java Enterprise Edition Programming",
     "Description": "​PLEASE NOTE:&nbsp;COMP 4656&nbsp;will have its final offering in January 2023. Continuing on from&nbsp;COMP 4613, this hands-on course focuses on development of Java Enterprise applications. Participants must already understand JDBC, Java Servlets, JSP, JSTL, XML and XML schemas. This capstone project is the final course in the Advanced Java Development Associate Certificate and is designed for experienced Java web developers who want to enhance their skills further by learning how to design and develop large scale enterprise applications. Students begin with an introduction to the Java EE application model, which defines the architecture for implementing services as distributed multi-tier application. Labs, exercises and assignments focus on creating web applications and web services using variety of industry standards and design patterns. There is a mandatory online component via D2L along with 3 hours class time each week. Topics include: Java Persistence API with Hibernate implementation, binding between XML and Java objects using JAXB API, RESTful and SOAP Web Services, Enterprise Beans and the Java Messaging Service API. By the end of the course, successful participants will have the skills to build multi-tier Java web applications by employing a variety of JEE libraries and integration techniques to industry standards.",
     "Language": ["Java"],
     "link": "https:\/\/www.bcit.ca\/courses\/java-enterprise-edition-programming-comp-4656\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Advanced Web Applications with PHP",
     "Description": "This hands-on course continues on from&nbsp;COMP 3015&nbsp;–Web Application Development with PHP and is aimed at students who are already able to build significant PHP web applications.&nbsp;COMP 4669, begins with a review of topics covered in&nbsp;COMP 3015, then students are introduced to the Model-View-Controller (MVC) and Active Record patterns. Topics include: RESTful APIs, Caching, Message Queues, and Cross Origin Resource Sharing (CORS). Object-Relational Mapping (ORM) libraries are used in assignments and labs to interact with MySQL databases. WebSockets are also discussed with an emphasis on secure development practices and application performance. Labs and assignments use open source libraries and integrate with application framework and how to safely persist passwords and communicate with third party services. Participants use industry standard PHP frameworks to develop secure and scalable RESTful APIs with JSON responses. Application middleware is also introduced to handle CORS and cookie handling.&nbsp;COMP 4669&nbsp;is an elective in the Applied Web Development (AWD), the Web and Mobile Application Development (WMA) Associate Certificates, and the CST FLEX Diploma. Note: Web Development students should also consider&nbsp;COMP 3012&nbsp;-Back-End Web Development with Node.js and&nbsp;COMP 3013&nbsp;-Front-End Web Development with React.js. Upon completion, successful students will be able to build and deploy front-end, single-page-applications (SPAs) by creating back-end PHP services for commercial quality server-side web applications.&nbsp;COMP 4669&nbsp;will only be offered in the winter (January) term.",
     "Language": ["PHP"],
     "link": "https:\/\/www.bcit.ca\/courses\/advanced-web-applications-with-php-comp-4669\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Microsoft SQL Server Administration",
     "Description": "​​Following on from&nbsp;COMP 1630, students who already understand data modeling, relational database design and SQL are provided with an in-depth understanding of designing MS SQL Server 2016 databases. This hand-on course is SQL Server 2016 specific, so those who have taken MS SQL 2000\/2005\/2008\/2012 will also benefit and be able to better plan migration to SQL Server 2016. Topics include: architecture, installing and configuring SQL Server, physical database design, creation, maintenance, security, and high availability solutions. Exercises and labs focus on creating, deploying, optimizing and maintaining enterprise SQL Server 2016 databases to help students obtain an understanding from a database administrator perspective. Successful participants will learn to install and configure SQL Server 2016, to plan and set policies for system access, end-users, back-ups, disaster recovery, and to troubleshoot and to manage database security.",
     "Language": ["SQL"],
     "link": "https:\/\/www.bcit.ca\/courses\/microsoft-sql-server-administration-comp-4677\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Microsoft SQL Server 2016 Development",
     "Description": "Following on from&nbsp;COMP 1630, students who already understand data modeling, relational database design and SQL are provided with an in-depth understanding of designing and implementing MS SQL 2016 Server databases advanced T-SQL and scripting methods. There is an overview of BI tools (MS SQL Server Reporting Services, MS SQL Server Integration Services) and comparisons between different editions of MS SQL Server. Topics include: architecture, new SQL 2016 components, T-SQL review, new T-SQL constructs for SQL Server 2016, programmable objects, security for the database developer and performance tuning procedures. Exercises and labs help students obtain a thorough understanding of Microsoft SQL Server 2016 from a database developer perspective, with a focus on how to create views, stored procedures and triggers. Successful participants will be able use procedural code in TSQL and .NET to develop and manage the data layer for software applications. Please note:&nbsp;COMP 4678&nbsp;will be offered for the last time in the spring (April) 2023 term.​",
     "Language": ["SQL"],
     "link": "https:\/\/www.bcit.ca\/courses\/microsoft-sql-server-2016-development-comp-4678\/"
    },
    {
     "School": "BCIT",
     "CourseName": "SQL Server Analysis Services, SSAS",
     "Description": "This hands-on course follows on from&nbsp;COMP 1630. Students who already understand relational database design, SQL programming and data warehouse foundations are introduced to SSIS.&nbsp;COMP 4681&nbsp;is a blended BYOD course, participants must provide their own Windows 10 dual core laptop with a minimum of 8GB RAM to participate in this course. Please note: BCIT does not provide technical support for student's hardware or operating systems. Topics include: how to install, configure and manage SSAS; designing multidimensional Business Intelligence Semantic Model (BISM), accessing different data sources, creating multidimensional databases, data mining, interacting with cube data using Multidimensional Expressions (MDX) queries from MS Excel. Labs and exercises show how to use SSAS to design, create and manage multidimensional structures containing data from other sources. Participants are shown how to create and maintain an Analysis Services database. MS Excel and MS SQL Reporting Services are used to present data from SSAS.&nbsp;COMP 4681&nbsp;is an elective in the Applied Database Administration and Design, ADAD Associate Certificate; the Applied Data Analytics Certificate, ADAC and the Computer Systems Technology, CST\/PTS Diploma. Participation online via the BCIT Learning Hub and attendance are mandatory during scheduled class hours plus online activities for a minimum of 4 hours per week. Students should also plan for 9+ hours reading and homework each week. Please note:&nbsp;COMP 4681&nbsp;will be offered in the winter (January) and fall (September) terms. Upon successful completion of&nbsp;COMP 4681&nbsp;students will be able to use SSAS to deploy an Analysis Services database with multiple levels of security for data mining, they will be able to extract data from collections of multiple data sources and applications.",
     "Language": ["SQL"],
     "link": "https:\/\/www.bcit.ca\/courses\/sql-server-analysis-services-ssas-comp-4681\/"
    },
    {
     "School": "BCIT",
     "CourseName": "Introduction to Operating Systems for CST",
     "Description": "​​Following on from “Procedural Programming with C\" and “Computer Architecture and Organization\"; students are introduced to the basic concepts, terminology and leveraging operating systems for concurrent software applications.&nbsp;COMP 4737&nbsp;replaces&nbsp;COMP 4731&nbsp;in the CST\/PTS Diploma. Participants focus on using concurrent programming: processes and threads, inter-process communication (IPC), synchronization and mutual exclusion, deadlock and starvation with an introduction to memory organization. Theoretical topics include: overall operating system structure, operating systems services, how these services are used, and kernel architecture. Labs and exercises reinforce concepts with examples of using these operating system services within application programs. This course is equivalent to&nbsp;COMP 4736&nbsp;in the Full-time CST Diploma. Upon successful completion, students will be able analyze, design and implement concurrent software applications.&nbsp;COMP 4737&nbsp;is required for the Computer Systems (CST\/PTS) Diploma and is offered twice per year the Winter (January) and Spring (May) terms.",
     "Language": ["C"],
     "link": "https:\/\/www.bcit.ca\/courses\/introduction-to-operating-systems-for-cst-comp-4737\/"
    }
   ]